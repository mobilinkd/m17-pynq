// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="acg_top,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.371000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=101,HLS_SYN_LUT=516,HLS_VERSION=2018_3}" *)

module acg_top (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_return,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 1'd1;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] ap_return;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] inc_V;
reg   [31:0] accumulator_V_0;
wire   [31:0] p_Val2_s_fu_132_p2;
wire   [31:0] r_V_2_fu_56_p2;
wire   [31:0] r_V_fu_44_p2;
wire   [31:0] tmp_fu_84_p2;
wire   [31:0] r_V_1_fu_50_p2;
wire   [31:0] tmp1_fu_102_p2;
wire   [31:0] tmp2_fu_114_p2;
wire   [31:0] tmp_7_fu_62_p2;
wire   [31:0] p_Val2_1_fu_126_p2;
wire   [31:0] p_Val2_2_fu_120_p2;
wire   [31:0] p_Val2_4_fu_108_p2;
wire   [31:0] p_Val2_6_fu_96_p2;
wire   [31:0] p_Val2_5_fu_90_p2;
wire   [31:0] p_Val2_3_fu_78_p2;
wire   [31:0] p_Val2_7_fu_72_p2;
wire   [0:0] tmp_4_fu_144_p3;
wire   [0:0] tmp_5_fu_152_p3;
wire   [0:0] tmp_6_fu_160_p3;
wire   [0:0] tmp_8_fu_168_p3;
wire   [0:0] tmp_9_fu_176_p3;
wire   [0:0] tmp_10_fu_184_p3;
wire   [0:0] tmp_11_fu_192_p3;
wire   [0:0] tmp_12_fu_200_p3;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 accumulator_V_0 = 32'd0;
end

acg_top_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
acg_top_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .inc_V(inc_V)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accumulator_V_0 <= p_Val2_s_fu_132_p2;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_return = {{{{{{{{tmp_4_fu_144_p3}, {tmp_5_fu_152_p3}}, {tmp_6_fu_160_p3}}, {tmp_8_fu_168_p3}}, {tmp_9_fu_176_p3}}, {tmp_10_fu_184_p3}}, {tmp_11_fu_192_p3}}, {tmp_12_fu_200_p3}};

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign p_Val2_1_fu_126_p2 = (tmp_7_fu_62_p2 + accumulator_V_0);

assign p_Val2_2_fu_120_p2 = (accumulator_V_0 + tmp2_fu_114_p2);

assign p_Val2_3_fu_78_p2 = (r_V_fu_44_p2 + accumulator_V_0);

assign p_Val2_4_fu_108_p2 = (accumulator_V_0 + tmp1_fu_102_p2);

assign p_Val2_5_fu_90_p2 = (accumulator_V_0 + tmp_fu_84_p2);

assign p_Val2_6_fu_96_p2 = (r_V_1_fu_50_p2 + accumulator_V_0);

assign p_Val2_7_fu_72_p2 = (inc_V + accumulator_V_0);

assign p_Val2_s_fu_132_p2 = (r_V_2_fu_56_p2 + accumulator_V_0);

assign r_V_1_fu_50_p2 = inc_V << 32'd2;

assign r_V_2_fu_56_p2 = inc_V << 32'd3;

assign r_V_fu_44_p2 = inc_V << 32'd1;

assign tmp1_fu_102_p2 = (inc_V + r_V_1_fu_50_p2);

assign tmp2_fu_114_p2 = (r_V_fu_44_p2 + r_V_1_fu_50_p2);

assign tmp_10_fu_184_p3 = p_Val2_5_fu_90_p2[32'd31];

assign tmp_11_fu_192_p3 = p_Val2_3_fu_78_p2[32'd31];

assign tmp_12_fu_200_p3 = p_Val2_7_fu_72_p2[32'd31];

assign tmp_4_fu_144_p3 = p_Val2_s_fu_132_p2[32'd31];

assign tmp_5_fu_152_p3 = p_Val2_1_fu_126_p2[32'd31];

assign tmp_6_fu_160_p3 = p_Val2_2_fu_120_p2[32'd31];

assign tmp_7_fu_62_p2 = (r_V_2_fu_56_p2 - inc_V);

assign tmp_8_fu_168_p3 = p_Val2_4_fu_108_p2[32'd31];

assign tmp_9_fu_176_p3 = p_Val2_6_fu_96_p2[32'd31];

assign tmp_fu_84_p2 = (inc_V + r_V_fu_44_p2);

endmodule //acg_top

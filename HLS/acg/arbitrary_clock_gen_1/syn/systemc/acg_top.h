// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _acg_top_HH_
#define _acg_top_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "acg_top_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct acg_top : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_lv<8> > ap_return;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    acg_top(sc_module_name name);
    SC_HAS_PROCESS(acg_top);

    ~acg_top();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    acg_top_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* acg_top_AXILiteS_s_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<32> > inc_V;
    sc_signal< sc_lv<32> > accumulator_V_0;
    sc_signal< sc_lv<32> > p_Val2_s_fu_132_p2;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > r_V_2_fu_56_p2;
    sc_signal< sc_lv<32> > r_V_fu_44_p2;
    sc_signal< sc_lv<32> > tmp_fu_84_p2;
    sc_signal< sc_lv<32> > r_V_1_fu_50_p2;
    sc_signal< sc_lv<32> > tmp1_fu_102_p2;
    sc_signal< sc_lv<32> > tmp2_fu_114_p2;
    sc_signal< sc_lv<32> > tmp_7_fu_62_p2;
    sc_signal< sc_lv<32> > p_Val2_1_fu_126_p2;
    sc_signal< sc_lv<32> > p_Val2_2_fu_120_p2;
    sc_signal< sc_lv<32> > p_Val2_4_fu_108_p2;
    sc_signal< sc_lv<32> > p_Val2_6_fu_96_p2;
    sc_signal< sc_lv<32> > p_Val2_5_fu_90_p2;
    sc_signal< sc_lv<32> > p_Val2_3_fu_78_p2;
    sc_signal< sc_lv<32> > p_Val2_7_fu_72_p2;
    sc_signal< sc_lv<1> > tmp_4_fu_144_p3;
    sc_signal< sc_lv<1> > tmp_5_fu_152_p3;
    sc_signal< sc_lv<1> > tmp_6_fu_160_p3;
    sc_signal< sc_lv<1> > tmp_8_fu_168_p3;
    sc_signal< sc_lv<1> > tmp_9_fu_176_p3;
    sc_signal< sc_lv<1> > tmp_10_fu_184_p3;
    sc_signal< sc_lv<1> > tmp_11_fu_192_p3;
    sc_signal< sc_lv<1> > tmp_12_fu_200_p3;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_return();
    void thread_ap_rst_n_inv();
    void thread_p_Val2_1_fu_126_p2();
    void thread_p_Val2_2_fu_120_p2();
    void thread_p_Val2_3_fu_78_p2();
    void thread_p_Val2_4_fu_108_p2();
    void thread_p_Val2_5_fu_90_p2();
    void thread_p_Val2_6_fu_96_p2();
    void thread_p_Val2_7_fu_72_p2();
    void thread_p_Val2_s_fu_132_p2();
    void thread_r_V_1_fu_50_p2();
    void thread_r_V_2_fu_56_p2();
    void thread_r_V_fu_44_p2();
    void thread_tmp1_fu_102_p2();
    void thread_tmp2_fu_114_p2();
    void thread_tmp_10_fu_184_p3();
    void thread_tmp_11_fu_192_p3();
    void thread_tmp_12_fu_200_p3();
    void thread_tmp_4_fu_144_p3();
    void thread_tmp_5_fu_152_p3();
    void thread_tmp_6_fu_160_p3();
    void thread_tmp_7_fu_62_p2();
    void thread_tmp_8_fu_168_p3();
    void thread_tmp_9_fu_176_p3();
    void thread_tmp_fu_84_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif

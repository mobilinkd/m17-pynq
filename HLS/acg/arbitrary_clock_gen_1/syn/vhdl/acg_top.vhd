-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity acg_top is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of acg_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "acg_top,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.371000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=101,HLS_SYN_LUT=516,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal inc_V : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulator_V_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_Val2_s_fu_132_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal r_V_2_fu_56_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_44_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_84_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_50_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_102_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_114_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_62_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_fu_126_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_fu_120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_fu_108_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_fu_96_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_90_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_fu_78_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_fu_72_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_144_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_152_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_160_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_168_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_176_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_184_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_192_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_200_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);

    component acg_top_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        inc_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    acg_top_AXILiteS_s_axi_U : component acg_top_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        inc_V => inc_V);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                accumulator_V_0 <= p_Val2_s_fu_132_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_return <= (((((((tmp_4_fu_144_p3 & tmp_5_fu_152_p3) & tmp_6_fu_160_p3) & tmp_8_fu_168_p3) & tmp_9_fu_176_p3) & tmp_10_fu_184_p3) & tmp_11_fu_192_p3) & tmp_12_fu_200_p3);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    p_Val2_1_fu_126_p2 <= std_logic_vector(unsigned(tmp_7_fu_62_p2) + unsigned(accumulator_V_0));
    p_Val2_2_fu_120_p2 <= std_logic_vector(unsigned(accumulator_V_0) + unsigned(tmp2_fu_114_p2));
    p_Val2_3_fu_78_p2 <= std_logic_vector(unsigned(r_V_fu_44_p2) + unsigned(accumulator_V_0));
    p_Val2_4_fu_108_p2 <= std_logic_vector(unsigned(accumulator_V_0) + unsigned(tmp1_fu_102_p2));
    p_Val2_5_fu_90_p2 <= std_logic_vector(unsigned(accumulator_V_0) + unsigned(tmp_fu_84_p2));
    p_Val2_6_fu_96_p2 <= std_logic_vector(unsigned(r_V_1_fu_50_p2) + unsigned(accumulator_V_0));
    p_Val2_7_fu_72_p2 <= std_logic_vector(unsigned(inc_V) + unsigned(accumulator_V_0));
    p_Val2_s_fu_132_p2 <= std_logic_vector(unsigned(r_V_2_fu_56_p2) + unsigned(accumulator_V_0));
    r_V_1_fu_50_p2 <= std_logic_vector(shift_left(unsigned(inc_V),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    r_V_2_fu_56_p2 <= std_logic_vector(shift_left(unsigned(inc_V),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    r_V_fu_44_p2 <= std_logic_vector(shift_left(unsigned(inc_V),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp1_fu_102_p2 <= std_logic_vector(unsigned(inc_V) + unsigned(r_V_1_fu_50_p2));
    tmp2_fu_114_p2 <= std_logic_vector(unsigned(r_V_fu_44_p2) + unsigned(r_V_1_fu_50_p2));
    tmp_10_fu_184_p3 <= p_Val2_5_fu_90_p2(31 downto 31);
    tmp_11_fu_192_p3 <= p_Val2_3_fu_78_p2(31 downto 31);
    tmp_12_fu_200_p3 <= p_Val2_7_fu_72_p2(31 downto 31);
    tmp_4_fu_144_p3 <= p_Val2_s_fu_132_p2(31 downto 31);
    tmp_5_fu_152_p3 <= p_Val2_1_fu_126_p2(31 downto 31);
    tmp_6_fu_160_p3 <= p_Val2_2_fu_120_p2(31 downto 31);
    tmp_7_fu_62_p2 <= std_logic_vector(unsigned(r_V_2_fu_56_p2) - unsigned(inc_V));
    tmp_8_fu_168_p3 <= p_Val2_4_fu_108_p2(31 downto 31);
    tmp_9_fu_176_p3 <= p_Val2_6_fu_96_p2(31 downto 31);
    tmp_fu_84_p2 <= std_logic_vector(unsigned(inc_V) + unsigned(r_V_fu_44_p2));
end behav;
